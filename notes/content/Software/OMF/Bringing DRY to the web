<section is="shaiya-markdown">

# Bringing DRY to the web
2025/09/08 - 12:56

## An issue with web development
Of course, there are many issues with web development. But I think the main one for small developers is the lack of DRY (don't repeat yourself) principles. 

There are many things that standard HTML and CSS can do without the need for JavaScript [1, 2]. But, one thing that it seemingly cannot do is reuse HTML. To do that, I can either use a frontend framework or I can use the native web components API [3] (or I can manually write HTML). 

This website did both. At first I used HTMX [4] to "fetch" the components when the page loaded. But, later on, I decided the need for HTMX was pointless bloat, so I switched to using the native web components API.

I agree with the sentiment that most websites that use frameworks really shouldn't be. Frameworks really should be saved for more complicated use cases. You don't need the bloat just to display static HTML. But I do think that most websites nowadays would benefit from certain framework features being included - namely, reusable components.

This is because most websites have some sort of navigation section. On this website it's at the top of the page. If I was using pure HTML and CSS, I would have to go into every page and change this manually. But, with a framework or templating engine, I can just change one file.  
But something bothered me... To get this functionality I'd have to import some kind of framework. But frameworks can be megabytes large and require a build stage. Why am I adding so much complexity to my development environment and deployment process just to have DRY?

## Solving the issue
While I was building this website it was the first time that I really tried to tackle the idea. And I achieved it by using the native web components API. This API is messy, and I didn't fully understand how it worked. But the end result was what I wanted. 

I had to write all the HTML for components in a multi-line string, which removed syntax highlighting in my editor and generally made the whole process a bit annoying. So, when it came time for me to write a library, I decided to solve this by using fetch().

### One More Framework (OMF)
One More Framework [5] was born.

The plan was simple. Create a wrapper for the web components API that let you write out .html files that could also have embedded style and script tags. Then, on page load, fetch them and "insert" them into the document (executing any script/style tags along the way). And do this in a small space, let's say 100 lines, pretty please and thank you.

The idea wasn't so much to have a full frontend framework to challenge the greats. It was more just to have something that could be easily included in any small project without much impact to the development experience. If React is 100% functionality with 100% size, I wanted 80% functionality with 20% size [6].

### Design philosophy
Alongside the small size I also wanted the framework to be approachable. Many frameworks take a lot of effort and time to really wrap your head properly around. 

So, OMF has a single function that takes some parameters. 99.9% of use cases for static web pages are covered by the first two parameters. There are optional parameters afterwards to cover more complicated use cases.

As of writing the documentation is a work in progress and is something that I really want to nail. I personally think the framework is simple enough to learn just from the examples, but I understand not everyone learns this way.

## The future of OMF
If there are ways that I can add significant and meaningful functionality to OMF without impacting the size too much, then I might. But really, in my heart of hearts, I want to be able to write a blog post in the future saying how this framework is now obsolete. 

I don't think people should need a library to do this. Instead, I think that HTML should come pre-packaged to do this. Namely with the link and template tags.

Imagine a future where you can write your component in template tags, then just link it into the main document and use it. Maybe give it a name or id attribute to use it in the same way that you use a native web component.

Sadly, until then, I'll keep developing this small tool.

## References
[1] https://justfuckingusehtml.com/
[2] https://lyra.horse/blog/2025/08/you-dont-need-js/
[3] https://developer.mozilla.org/en-US/docs/Web/API/Web_components
[4] https://htmx.org/
[5] https://github.com/ShaiyaJ/omf
[6] https://en.wikipedia.org/wiki/Pareto_principle

</section>
